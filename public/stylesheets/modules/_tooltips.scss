// hint-variables.scss
// 
// Declares some variables used within the library.


// default tooltip height
$tooltipHeight: 28px !default;

// border-width for tooltip arrow
$arrowBorderWidth: 6px !default;

// horizontal arrow offset
$arrowOffsetX: 3 * $arrowBorderWidth !default;

// text-shadow darken percentage
$textShadowDarkenAmount: 25% !default;

// transition distance
$transitionDistance: 8px !default;


// Various colors
// Default color is blackish
$defaultColor: hsl(0, 0%, 22%) !default;

// Error color
$errorColor: hsl(1, 40%, 50%) !default;

// Warning color
$warningColor: hsl(38, 46%, 54%) !default;

// Info Color
$infoColor: hsl(200, 50%, 45%) !default;

// Success Color
$successColor: hsl(121, 32%, 40%) !default;

// hint-mixins.scss
// 
// Place to store common mixins.


// Generates border-color rules for all 4 positions
@mixin arrow-border-color($color, $isInsideSelector: "true") {
	@each $position in top, bottom, left, right {
		// if the current mixin is called from within a selector, use a '&'. Otherwise not.
		@if $isInsideSelector == "true" {
			&.hint--#{$position}:before {
				border-#{$position}-color: $color;
			}
		}
		@else {
			.hint--#{$position}:before {
				border-#{$position}-color: $color;
			}
		}
	}
}



/**
 * source: hint-core.scss
 *
 * Defines the basic styling for the tooltip.
 * Each tooltip is made of 2 parts:
 * 	1) body (:after)
 * 	2) arrow (:before)
 * 
 * Classes added:
 * 	1) hint
 */

.hint, [data-hint] {
	position: relative;
	display: inline-block;

	&:before, &:after {
		position: absolute;

		// HACK: Trigger hardware accelerated rendering, otherwise transform was not
		// working on a hidden element
		-webkit-transform: translate3d(0, 0, 0);
		-moz-transform: translate3d(0, 0, 0);
		transform: translate3d(0, 0, 0);
		
		// HACK: visibility is set to hidden because IE & Opera don't support
		// pointer-events on HTML content yet because of which hovering a hidden tooltip
		// shows the tooltip.
		visibility: hidden;
		opacity: 0;
		z-index: 1000000;
		// shouldn't receive pointer events, otherwise even hovering tooltip will make it appear
		pointer-events: none;

		// pseudo element transition is gonna come soon: https://bugs.webkit.org/show_bug.cgi?id=92591
		-webkit-transition: 0.3s ease;
		-moz-transition: 0.3s ease;
		transition: 0.3s ease;
	}

	&:hover:before, &:hover:after {
		visibility: visible;
		opacity: 1;
	}

	/**
	 * tooltip arrow
	 */
	&:before {
		content: '';
		position: absolute;
		background: transparent;
		border: $arrowBorderWidth solid transparent;
		// move z-index 1 up than :after so that it shows over box-shadow
		z-index: 1000001;
	}

	/**
	 * tooltip body
	 */
	&:after {
		content: attr(data-hint);
		background: $defaultColor;
		color: white;
		text-shadow: 0 -1px 0px darken($defaultColor, $textShadowDarkenAmount);
		padding: 8px 10px;
		font-size: 16px;
		line-height: 12px;
		white-space: nowrap;
		box-shadow: 4px 4px 8px rgba(0, 0, 0, 0.3);
		border-radius: 4px;
	}
}

/**
 * source: hint-position.scss
 *
 * Defines the positoning logic for the tooltips.
 * 
 * Classes added:
 * 	1) hint--top
 * 	2) hint--bottom
 * 	3) hint--left
 * 	4) hint--right
 */

@mixin vertical-positioned-tooltip($propertyY, $transitionDirection) {
	&:before {
		// get the arrow out
		margin-#{$propertyY}: -2 * $arrowBorderWidth;
	}

	&:after {
		// bring back the tooltip by some offset so that arrow doesn't stick at end
		margin-left: -1 * $arrowOffsetX;
	}

	&:before, &:after {
		#{$propertyY}: 100%;
		left: 50%;
	}

	&:hover:before, &:hover:after {
		-webkit-transform: translateY($transitionDirection * $transitionDistance);
		-moz-transform: translateY($transitionDirection * $transitionDistance);
		transform: translateY($transitionDirection * $transitionDistance);
	}
}

@mixin horizontal-positioned-tooltip($propertyX, $transitionDirection) {
	&:before {
		// get the arrow out
		margin-#{$propertyX}: -2 * $arrowBorderWidth;
		// bring back to center
		margin-bottom: -1 * $arrowBorderWidth;
	}

	&:after {
		// bring back to center
		margin-bottom: -1 * floor($tooltipHeight / 2);
	}

	&:before, &:after {
		#{$propertyX}: 100%;
		bottom: 50%;
	}

	&:hover:before, &:hover:after {
		-webkit-transform: translateX($transitionDirection * $transitionDistance);
		-moz-transform: translateX($transitionDirection * $transitionDistance);
		transform: translateX($transitionDirection * $transitionDistance);
	}
}


/**
 * set default color for tooltip arrows
 */
@include arrow-border-color($defaultColor, 'false');

/**
 * top tooltip
 */
.hint--top {
	@include vertical-positioned-tooltip('bottom', -1);
}

/**
 * bottom tooltip
 */
.hint--bottom {
	@include vertical-positioned-tooltip('top', 1);
}

/**
 * right tooltip
 */
.hint--right {
	@include horizontal-positioned-tooltip('left', 1);
}

/**
 * left tooltip
 */
.hint--left {
	@include horizontal-positioned-tooltip('right', -1);
}

/**
 * source: hint-color-types.scss
 *
 * Contains tooltips of various types based on color differences.
 * 
 * Classes added:
 * 	1) hint--error
 * 	2) hint--warning
 * 	3) hint--info
 * 	4) hint--success
 * 	
 */


// mixin to generate different color style tooltips
@mixin hint-type($color) {
	&:after {
		background-color: $color;
		text-shadow: 0 -1px 0px darken($color, $textShadowDarkenAmount);
	}

	// generate arrow color style
	@include arrow-border-color($color);
}

/**
 * Error
 */
.hint--error {
	@include hint-type($errorColor);
}

/**
 * Warning
 */
.hint--warning {
	@include hint-type($warningColor)
}

/**
 * Info
 */
.hint--info {
	@include hint-type($infoColor)
}

/**
 * Success
 */
.hint--success {
	@include hint-type($successColor)
}